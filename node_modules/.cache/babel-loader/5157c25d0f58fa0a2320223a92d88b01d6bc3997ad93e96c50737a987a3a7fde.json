{"ast":null,"code":"var _jsxFileName = \"D:\\\\Service Company\\\\safeeditpdf\\\\src\\\\components\\\\OcrPdf.jsx\",\n  _s = $RefreshSig$();\n// src/components/OcrPdf.jsx\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OcrPdf() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleOCR = async () => {\n    if (!file) return alert(\"üìÑ Please select a scanned PDF\");\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"type\", \"ocr-pdf\");\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:5001/convert\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) {\n        const errText = await res.text();\n        throw new Error(errText || \"OCR failed\");\n      }\n      const blob = await res.blob();\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = file.name.replace(/\\.pdf$/, \".txt\");\n      link.click();\n      URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error(\"‚ùå OCR Error:\", err);\n      alert(\"OCR failed: \" + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOCR,\n      disabled: loading,\n      children: loading ? \"üîç Extracting...\" : \"üîç OCR PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(OcrPdf, \"b5r+Px8JiWNYfU82tOaR18FdgbQ=\");\n_c = OcrPdf;\nexport default OcrPdf;\nvar _c;\n$RefreshReg$(_c, \"OcrPdf\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","OcrPdf","_s","file","setFile","loading","setLoading","handleOCR","alert","formData","FormData","append","res","fetch","method","body","ok","errText","text","Error","blob","url","URL","createObjectURL","link","document","createElement","href","download","name","replace","click","revokeObjectURL","err","console","error","message","children","type","accept","onChange","e","target","files","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Service Company/safeeditpdf/src/components/OcrPdf.jsx"],"sourcesContent":["// src/components/OcrPdf.jsx\r\nimport React, { useState } from \"react\";\r\n\r\nfunction OcrPdf() {\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleOCR = async () => {\r\n    if (!file) return alert(\"üìÑ Please select a scanned PDF\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"type\", \"ocr-pdf\");\r\n\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(\"http://localhost:5001/convert\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errText = await res.text();\r\n        throw new Error(errText || \"OCR failed\");\r\n      }\r\n\r\n      const blob = await res.blob();\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = file.name.replace(/\\.pdf$/, \".txt\");\r\n      link.click();\r\n      URL.revokeObjectURL(url);\r\n    } catch (err) {\r\n      console.error(\"‚ùå OCR Error:\", err);\r\n      alert(\"OCR failed: \" + err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/pdf\"\r\n        onChange={(e) => setFile(e.target.files[0])}\r\n      />\r\n      <button onClick={handleOCR} disabled={loading}>\r\n        {loading ? \"üîç Extracting...\" : \"üîç OCR PDF\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OcrPdf;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACJ,IAAI,EAAE,OAAOK,KAAK,CAAC,gCAAgC,CAAC;IAEzD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAER,IAAI,CAAC;IAC7BM,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC;IAElCL,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,GAAG,CAACI,EAAE,EAAE;QACX,MAAMC,OAAO,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAChC,MAAM,IAAIC,KAAK,CAACF,OAAO,IAAI,YAAY,CAAC;MAC1C;MAEA,MAAMG,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAI,CAAC,CAAC;MAC7B,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;MACrC,MAAMI,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;MACfG,IAAI,CAACI,QAAQ,GAAGzB,IAAI,CAAC0B,IAAI,CAACC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;MACnDN,IAAI,CAACO,KAAK,CAAC,CAAC;MACZT,GAAG,CAACU,eAAe,CAACX,GAAG,CAAC;IAC1B,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;MAClCzB,KAAK,CAAC,cAAc,GAAGyB,GAAG,CAACG,OAAO,CAAC;IACrC,CAAC,SAAS;MACR9B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEN,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MACEsC,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,iBAAiB;MACxBC,QAAQ,EAAGC,CAAC,IAAKrC,OAAO,CAACqC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACF/C,OAAA;MAAQgD,OAAO,EAAEzC,SAAU;MAAC0C,QAAQ,EAAE5C,OAAQ;MAAAgC,QAAA,EAC3ChC,OAAO,GAAG,kBAAkB,GAAG;IAAY;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC7C,EAAA,CAlDQD,MAAM;AAAAiD,EAAA,GAANjD,MAAM;AAoDf,eAAeA,MAAM;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}