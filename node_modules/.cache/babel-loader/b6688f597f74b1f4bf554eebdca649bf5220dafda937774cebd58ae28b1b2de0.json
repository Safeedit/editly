{"ast":null,"code":"var _jsxFileName = \"D:\\\\Service Company\\\\safeeditpdf\\\\src\\\\components\\\\SplitPdf.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SplitPdf() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const split = async () => {\n    if (!file) return alert(\"Please upload a PDF to split.\");\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"type\", \"split-pdf\"); // ✅ Corrected field name and value\n\n      const res = await fetch(\"http://localhost:5001/convert\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) {\n        const errText = await res.text();\n        throw new Error(errText || \"Splitting failed\");\n      }\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"split_pages.zip\";\n      link.click();\n      window.URL.revokeObjectURL(url); // Cleanup\n    } catch (err) {\n      console.error(\"Split Error:\", err);\n      alert(\"❌ Failed to split the PDF.\\nIs your backend running and configured?\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      onChange: e => setFile(e.target.files[0]),\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: split,\n      className: \"btn bg-yellow-600\",\n      disabled: loading,\n      children: loading ? \"Splitting...\" : \"✂️ Split PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(SplitPdf, \"b5r+Px8JiWNYfU82tOaR18FdgbQ=\");\n_c = SplitPdf;\nexport default SplitPdf;\nvar _c;\n$RefreshReg$(_c, \"SplitPdf\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SplitPdf","_s","file","setFile","loading","setLoading","split","alert","formData","FormData","append","res","fetch","method","body","ok","errText","text","Error","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","err","console","error","style","marginTop","children","type","accept","onChange","e","target","files","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Service Company/safeeditpdf/src/components/SplitPdf.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction SplitPdf() {\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const split = async () => {\r\n    if (!file) return alert(\"Please upload a PDF to split.\");\r\n\r\n    setLoading(true);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"type\", \"split-pdf\"); // ✅ Corrected field name and value\r\n\r\n      const res = await fetch(\"http://localhost:5001/convert\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errText = await res.text();\r\n        throw new Error(errText || \"Splitting failed\");\r\n      }\r\n\r\n      const blob = await res.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = \"split_pages.zip\";\r\n      link.click();\r\n      window.URL.revokeObjectURL(url); // Cleanup\r\n    } catch (err) {\r\n      console.error(\"Split Error:\", err);\r\n      alert(\"❌ Failed to split the PDF.\\nIs your backend running and configured?\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: \"10px\" }}>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/pdf\"\r\n        onChange={(e) => setFile(e.target.files[0])}\r\n        className=\"input\"\r\n      />\r\n      <button onClick={split} className=\"btn bg-yellow-600\" disabled={loading}>\r\n        {loading ? \"Splitting...\" : \"✂️ Split PDF\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SplitPdf;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMS,KAAK,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAI,CAACJ,IAAI,EAAE,OAAOK,KAAK,CAAC,+BAA+B,CAAC;IAExDF,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAER,IAAI,CAAC;MAC7BM,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;;MAEtC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,GAAG,CAACI,EAAE,EAAE;QACX,MAAMC,OAAO,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAChC,MAAM,IAAIC,KAAK,CAACF,OAAO,IAAI,kBAAkB,CAAC;MAChD;MAEA,MAAMG,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAI,CAAC,CAAC;MAC7B,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;MAC5C,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;MACfI,IAAI,CAACI,QAAQ,GAAG,iBAAiB;MACjCJ,IAAI,CAACK,KAAK,CAAC,CAAC;MACZR,MAAM,CAACC,GAAG,CAACQ,eAAe,CAACV,GAAG,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;MAClCxB,KAAK,CAAC,qEAAqE,CAAC;IAC9E,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKmC,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAChCrC,OAAA;MACEsC,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,iBAAiB;MACxBC,QAAQ,EAAGC,CAAC,IAAKrC,OAAO,CAACqC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;MAC5CC,SAAS,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eACFhD,OAAA;MAAQiD,OAAO,EAAE1C,KAAM;MAACqC,SAAS,EAAC,mBAAmB;MAACM,QAAQ,EAAE7C,OAAQ;MAAAgC,QAAA,EACrEhC,OAAO,GAAG,cAAc,GAAG;IAAc;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC9C,EAAA,CAnDQD,QAAQ;AAAAkD,EAAA,GAARlD,QAAQ;AAqDjB,eAAeA,QAAQ;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}