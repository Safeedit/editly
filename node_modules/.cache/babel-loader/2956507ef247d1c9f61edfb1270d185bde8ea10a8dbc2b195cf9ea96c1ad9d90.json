{"ast":null,"code":"var _jsxFileName = \"D:\\\\Service Company\\\\safeeditpdf\\\\src\\\\components\\\\CompressPdf.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport DropzoneUpload from \"./DropzoneUpload\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompressPdf() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleCompress = async () => {\n    if (!file) return alert(\"üìÑ Please select a PDF to compress.\");\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"type\", \"compress-pdf\");\n    setLoading(true);\n    try {\n      const res = await fetch(\"http://localhost:5001/convert\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) throw new Error(await res.text());\n      const blob = await res.blob();\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = file.name.replace(/\\.pdf$/, \"_compressed.pdf\");\n      link.click();\n      URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error(\"‚ùå Compression Error:\", err);\n      alert(\"Compression failed: \" + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DropzoneUpload, {\n      onFilesSelected: setFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCompress,\n      disabled: loading,\n      children: loading ? \"üóú Compressing...\" : \"üóú Compress PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(CompressPdf, \"b5r+Px8JiWNYfU82tOaR18FdgbQ=\");\n_c = CompressPdf;\nexport default CompressPdf;\nvar _c;\n$RefreshReg$(_c, \"CompressPdf\");","map":{"version":3,"names":["React","useState","DropzoneUpload","jsxDEV","_jsxDEV","CompressPdf","_s","file","setFile","loading","setLoading","handleCompress","alert","formData","FormData","append","res","fetch","method","body","ok","Error","text","blob","url","URL","createObjectURL","link","document","createElement","href","download","name","replace","click","revokeObjectURL","err","console","error","message","children","onFilesSelected","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Service Company/safeeditpdf/src/components/CompressPdf.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport DropzoneUpload from \"./DropzoneUpload\";\r\n\r\nfunction CompressPdf() {\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleCompress = async () => {\r\n    if (!file) return alert(\"üìÑ Please select a PDF to compress.\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"type\", \"compress-pdf\");\r\n\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(\"http://localhost:5001/convert\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) throw new Error(await res.text());\r\n\r\n      const blob = await res.blob();\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = file.name.replace(/\\.pdf$/, \"_compressed.pdf\");\r\n      link.click();\r\n      URL.revokeObjectURL(url);\r\n    } catch (err) {\r\n      console.error(\"‚ùå Compression Error:\", err);\r\n      alert(\"Compression failed: \" + err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DropzoneUpload onFilesSelected={setFile} />\r\n      <button onClick={handleCompress} disabled={loading}>\r\n        {loading ? \"üóú Compressing...\" : \"üóú Compress PDF\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompressPdf;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACJ,IAAI,EAAE,OAAOK,KAAK,CAAC,qCAAqC,CAAC;IAE9D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAER,IAAI,CAAC;IAC7BM,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC;IAEvCL,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC,CAAC;MAE9C,MAAMC,IAAI,GAAG,MAAMP,GAAG,CAACO,IAAI,CAAC,CAAC;MAC7B,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;MACrC,MAAMI,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;MACfG,IAAI,CAACI,QAAQ,GAAGxB,IAAI,CAACyB,IAAI,CAACC,OAAO,CAAC,QAAQ,EAAE,iBAAiB,CAAC;MAC9DN,IAAI,CAACO,KAAK,CAAC,CAAC;MACZT,GAAG,CAACU,eAAe,CAACX,GAAG,CAAC;IAC1B,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;MAC1CxB,KAAK,CAAC,sBAAsB,GAAGwB,GAAG,CAACG,OAAO,CAAC;IAC7C,CAAC,SAAS;MACR7B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEN,OAAA;IAAAoC,QAAA,gBACEpC,OAAA,CAACF,cAAc;MAACuC,eAAe,EAAEjC;IAAQ;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5CzC,OAAA;MAAQ0C,OAAO,EAAEnC,cAAe;MAACoC,QAAQ,EAAEtC,OAAQ;MAAA+B,QAAA,EAChD/B,OAAO,GAAG,mBAAmB,GAAG;IAAiB;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACvC,EAAA,CA3CQD,WAAW;AAAA2C,EAAA,GAAX3C,WAAW;AA6CpB,eAAeA,WAAW;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}