{"ast":null,"code":"var _jsxFileName = \"D:\\\\Service Company\\\\safeeditpdf\\\\src\\\\components\\\\MergePdf.jsx\",\n  _s = $RefreshSig$();\n// src/components/MergePdf.jsx\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MergePdf() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [merging, setMerging] = useState(false);\n  const handleUpload = async () => {\n    if (files.length < 2) {\n      alert(\"Please select at least 2 PDF files to merge.\");\n      return;\n    }\n    try {\n      setMerging(true);\n      const formData = new FormData();\n      for (let file of files) {\n        formData.append(\"pdf_files\", file);\n      }\n      const res = await fetch(\"http://localhost:5001/merge-pdf\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) throw new Error(\"Merge failed\");\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"merged.pdf\";\n      link.click();\n    } catch (err) {\n      alert(\"Error merging PDFs. Please try again.\");\n      console.error(err);\n    } finally {\n      setMerging(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      multiple: true,\n      onChange: e => setFiles([...e.target.files]),\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      className: \"btn bg-purple-600\",\n      children: merging ? \"Merging...\" : \"ðŸ”— Merge PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(MergePdf, \"7PIJ6C5Y3+YfE6zRuDginHGNm28=\");\n_c = MergePdf;\nexport default MergePdf;\nvar _c;\n$RefreshReg$(_c, \"MergePdf\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MergePdf","_s","files","setFiles","merging","setMerging","handleUpload","length","alert","formData","FormData","file","append","res","fetch","method","body","ok","Error","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","click","err","console","error","style","marginTop","children","type","accept","multiple","onChange","e","target","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Service Company/safeeditpdf/src/components/MergePdf.jsx"],"sourcesContent":["// src/components/MergePdf.jsx\r\nimport React, { useState } from \"react\";\r\n\r\nfunction MergePdf() {\r\n  const [files, setFiles] = useState([]);\r\n  const [merging, setMerging] = useState(false);\r\n\r\n  const handleUpload = async () => {\r\n    if (files.length < 2) {\r\n      alert(\"Please select at least 2 PDF files to merge.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setMerging(true);\r\n      const formData = new FormData();\r\n      for (let file of files) {\r\n        formData.append(\"pdf_files\", file);\r\n      }\r\n\r\n      const res = await fetch(\"http://localhost:5001/merge-pdf\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) throw new Error(\"Merge failed\");\r\n\r\n      const blob = await res.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = \"merged.pdf\";\r\n      link.click();\r\n    } catch (err) {\r\n      alert(\"Error merging PDFs. Please try again.\");\r\n      console.error(err);\r\n    } finally {\r\n      setMerging(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: \"10px\" }}>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/pdf\"\r\n        multiple\r\n        onChange={(e) => setFiles([...e.target.files])}\r\n        className=\"input\"\r\n      />\r\n      <button onClick={handleUpload} className=\"btn bg-purple-600\">\r\n        {merging ? \"Merging...\" : \"ðŸ”— Merge PDFs\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MergePdf;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIJ,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;MACpBC,KAAK,CAAC,8CAA8C,CAAC;MACrD;IACF;IAEA,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/B,KAAK,IAAIC,IAAI,IAAIT,KAAK,EAAE;QACtBO,QAAQ,CAACG,MAAM,CAAC,WAAW,EAAED,IAAI,CAAC;MACpC;MAEA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEP;MACR,CAAC,CAAC;MAEF,IAAI,CAACI,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MAE5C,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAI,CAAC,CAAC;MAC7B,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;MAC5C,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;MACfI,IAAI,CAACI,QAAQ,GAAG,YAAY;MAC5BJ,IAAI,CAACK,KAAK,CAAC,CAAC;IACd,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZtB,KAAK,CAAC,uCAAuC,CAAC;MAC9CuB,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IACpB,CAAC,SAAS;MACRzB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKkC,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAChCpC,OAAA;MACEqC,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,iBAAiB;MACxBC,QAAQ;MACRC,QAAQ,EAAGC,CAAC,IAAKrC,QAAQ,CAAC,CAAC,GAAGqC,CAAC,CAACC,MAAM,CAACvC,KAAK,CAAC,CAAE;MAC/CwC,SAAS,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eACF/C,OAAA;MAAQgD,OAAO,EAAEzC,YAAa;MAACoC,SAAS,EAAC,mBAAmB;MAAAP,QAAA,EACzD/B,OAAO,GAAG,YAAY,GAAG;IAAe;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC7C,EAAA,CApDQD,QAAQ;AAAAgD,EAAA,GAARhD,QAAQ;AAsDjB,eAAeA,QAAQ;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}