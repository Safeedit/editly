{"ast":null,"code":"var _jsxFileName = \"D:\\\\Service Company\\\\safeeditpdf\\\\src\\\\components\\\\MergePdf.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MergePdf() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [merging, setMerging] = useState(false);\n  const handleUpload = async () => {\n    if (files.length < 2) {\n      alert(\"Please select at least 2 PDF files to merge.\");\n      return;\n    }\n    setMerging(true);\n    const formData = new FormData();\n    for (let file of files) {\n      formData.append(\"file\", file); // ðŸ”¥ Backend expects \"file\"\n    }\n    formData.append(\"type\", \"merge-pdf\"); // âœ… Must match backend\n\n    try {\n      const res = await fetch(\"http://localhost:5001/convert\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) throw new Error(await res.text());\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"merged.pdf\";\n      link.click();\n    } catch (err) {\n      alert(\"Merging failed. Please check the files or try again.\");\n      console.error(err);\n    } finally {\n      setMerging(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCCE Merge PDF Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      multiple: true // âœ… This enables multiple file selection\n      ,\n      onChange: e => {\n        const selectedFiles = Array.from(e.target.files);\n        setFiles(selectedFiles);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: merging,\n      children: merging ? \"Merging...\" : \"ðŸ”— Merge PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [files.length, \" file\", files.length > 1 ? \"s\" : \"\", \" selected\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(MergePdf, \"7PIJ6C5Y3+YfE6zRuDginHGNm28=\");\n_c = MergePdf;\nexport default MergePdf;\nvar _c;\n$RefreshReg$(_c, \"MergePdf\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MergePdf","_s","files","setFiles","merging","setMerging","handleUpload","length","alert","formData","FormData","file","append","res","fetch","method","body","ok","Error","text","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","click","err","console","error","style","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","multiple","onChange","e","selectedFiles","Array","from","target","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Service Company/safeeditpdf/src/components/MergePdf.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction MergePdf() {\r\n  const [files, setFiles] = useState([]);\r\n  const [merging, setMerging] = useState(false);\r\n\r\n  const handleUpload = async () => {\r\n    if (files.length < 2) {\r\n      alert(\"Please select at least 2 PDF files to merge.\");\r\n      return;\r\n    }\r\n\r\n    setMerging(true);\r\n    const formData = new FormData();\r\n    for (let file of files) {\r\n      formData.append(\"file\", file); // ðŸ”¥ Backend expects \"file\"\r\n    }\r\n    formData.append(\"type\", \"merge-pdf\"); // âœ… Must match backend\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5001/convert\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) throw new Error(await res.text());\r\n\r\n      const blob = await res.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = \"merged.pdf\";\r\n      link.click();\r\n    } catch (err) {\r\n      alert(\"Merging failed. Please check the files or try again.\");\r\n      console.error(err);\r\n    } finally {\r\n      setMerging(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: \"10px\" }}>\r\n      <h3>ðŸ“Ž Merge PDF Files</h3>\r\n\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/pdf\"\r\n        multiple // âœ… This enables multiple file selection\r\n        onChange={(e) => {\r\n          const selectedFiles = Array.from(e.target.files);\r\n          setFiles(selectedFiles);\r\n        }}\r\n      />\r\n\r\n      <button onClick={handleUpload} disabled={merging}>\r\n        {merging ? \"Merging...\" : \"ðŸ”— Merge PDFs\"}\r\n      </button>\r\n\r\n      {files.length > 0 && (\r\n        <p>{files.length} file{files.length > 1 ? \"s\" : \"\"} selected</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MergePdf;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}