{"ast":null,"code":"var _jsxFileName = \"D:\\\\Service Company\\\\safeeditpdf\\\\src\\\\components\\\\MergePdf.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport DropzoneUpload from \"./DropzoneUpload\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MergePdf() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [merging, setMerging] = useState(false);\n  const handleUpload = async () => {\n    if (files.length < 2) {\n      alert(\"‚ùó Please select at least 2 PDF files to merge.\");\n      return;\n    }\n    setMerging(true);\n    const formData = new FormData();\n    files.forEach(file => formData.append(\"file\", file));\n    formData.append(\"type\", \"merge-pdf\");\n    try {\n      const res = await fetch(\"http://localhost:5001/convert\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!res.ok) throw new Error(await res.text());\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"merged.pdf\";\n      link.click();\n      URL.revokeObjectURL(url);\n    } catch (err) {\n      alert(\"‚ùå Merging failed. Please check the files or try again.\");\n      console.error(err);\n    } finally {\n      setMerging(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\",\n      border: \"1px solid rgba(237, 212, 165, 0.2)\",\n      borderRadius: \"12px\",\n      maxWidth: \"500px\",\n      margin: \"1rem auto\",\n      background: \"#191818\",\n      color: \"#ffffff\",\n      boxShadow: \"0 0 15px rgba(243, 206, 162, 0.3)\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        color: \"#ffd700\",\n        marginBottom: \"12px\"\n      },\n      children: \"\\uD83D\\uDD17 Merge PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropzoneUpload, {\n      onFilesSelected: f => setFiles(Array.isArray(f) ? f : [f]),\n      accept: \"application/pdf\",\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginTop: \"10px\",\n          fontSize: \"14px\",\n          color: \"#fefefe\"\n        },\n        children: [\"\\u2705 \", files.length, \" PDF file\", files.length > 1 ? \"s\" : \"\", \" selected:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          textAlign: \"left\",\n          paddingLeft: \"20px\",\n          fontSize: \"13px\",\n          color: \"#ddd\"\n        },\n        children: files.map((file, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\uD83D\\uDCC4 \", file.name]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: merging,\n      style: {\n        marginTop: \"10px\",\n        padding: \"8px 16px\",\n        backgroundColor: \"#ff8c00\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: \"6px\",\n        cursor: merging ? \"not-allowed\" : \"pointer\",\n        fontSize: \"14px\",\n        fontWeight: 500\n      },\n      children: merging ? \"üîÑ Merging...\" : \"üîó Merge PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(MergePdf, \"7PIJ6C5Y3+YfE6zRuDginHGNm28=\");\n_c = MergePdf;\nexport default MergePdf;\nvar _c;\n$RefreshReg$(_c, \"MergePdf\");","map":{"version":3,"names":["React","useState","DropzoneUpload","jsxDEV","_jsxDEV","Fragment","_Fragment","MergePdf","_s","files","setFiles","merging","setMerging","handleUpload","length","alert","formData","FormData","forEach","file","append","res","fetch","method","body","ok","Error","text","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","err","console","error","style","padding","border","borderRadius","maxWidth","margin","background","color","boxShadow","textAlign","children","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onFilesSelected","f","Array","isArray","accept","multiple","marginTop","fontSize","paddingLeft","map","idx","name","onClick","disabled","backgroundColor","cursor","fontWeight","_c","$RefreshReg$"],"sources":["D:/Service Company/safeeditpdf/src/components/MergePdf.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport DropzoneUpload from \"./DropzoneUpload\";\r\n\r\nfunction MergePdf() {\r\n  const [files, setFiles] = useState([]);\r\n  const [merging, setMerging] = useState(false);\r\n\r\n  const handleUpload = async () => {\r\n    if (files.length < 2) {\r\n      alert(\"‚ùó Please select at least 2 PDF files to merge.\");\r\n      return;\r\n    }\r\n\r\n    setMerging(true);\r\n    const formData = new FormData();\r\n    files.forEach((file) => formData.append(\"file\", file));\r\n    formData.append(\"type\", \"merge-pdf\");\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5001/convert\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) throw new Error(await res.text());\r\n\r\n      const blob = await res.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = \"merged.pdf\";\r\n      link.click();\r\n      URL.revokeObjectURL(url);\r\n    } catch (err) {\r\n      alert(\"‚ùå Merging failed. Please check the files or try again.\");\r\n      console.error(err);\r\n    } finally {\r\n      setMerging(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: \"1rem\",\r\n        border: \"1px solid rgba(237, 212, 165, 0.2)\",\r\n        borderRadius: \"12px\",\r\n        maxWidth: \"500px\",\r\n        margin: \"1rem auto\",\r\n        background: \"#191818\",\r\n        color: \"#ffffff\",\r\n        boxShadow: \"0 0 15px rgba(243, 206, 162, 0.3)\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <h3 style={{ color: \"#ffd700\", marginBottom: \"12px\" }}>üîó Merge PDFs</h3>\r\n\r\n      <DropzoneUpload\r\n        onFilesSelected={(f) => setFiles(Array.isArray(f) ? f : [f])}\r\n        accept=\"application/pdf\"\r\n        multiple={true}\r\n      />\r\n\r\n      {files.length > 0 && (\r\n        <>\r\n          <p style={{ marginTop: \"10px\", fontSize: \"14px\", color: \"#fefefe\" }}>\r\n            ‚úÖ {files.length} PDF file{files.length > 1 ? \"s\" : \"\"} selected:\r\n          </p>\r\n          <ul style={{ textAlign: \"left\", paddingLeft: \"20px\", fontSize: \"13px\", color: \"#ddd\" }}>\r\n            {files.map((file, idx) => (\r\n              <li key={idx}>üìÑ {file.name}</li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n\r\n      <button\r\n        onClick={handleUpload}\r\n        disabled={merging}\r\n        style={{\r\n          marginTop: \"10px\",\r\n          padding: \"8px 16px\",\r\n          backgroundColor: \"#ff8c00\",\r\n          color: \"#fff\",\r\n          border: \"none\",\r\n          borderRadius: \"6px\",\r\n          cursor: merging ? \"not-allowed\" : \"pointer\",\r\n          fontSize: \"14px\",\r\n          fontWeight: 500,\r\n        }}\r\n      >\r\n        {merging ? \"üîÑ Merging...\" : \"üîó Merge PDFs\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MergePdf;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}