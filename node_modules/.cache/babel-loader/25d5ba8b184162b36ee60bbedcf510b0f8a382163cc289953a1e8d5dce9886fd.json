{"ast":null,"code":"var _jsxFileName = \"D:\\\\Service Company\\\\safeeditpdf\\\\src\\\\components\\\\MergePdf.jsx\",\n  _s = $RefreshSig$();\n// src/components/MergePdf.jsx\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MergePdf() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [merging, setMerging] = useState(false);\n  const [error, setError] = useState(null);\n  const handleMerge = async () => {\n    if (files.length < 2) {\n      alert(\"Please select at least 2 PDF files.\");\n      return;\n    }\n    setMerging(true);\n    setError(null);\n    const formData = new FormData();\n    files.forEach(file => formData.append(\"pdf_files\", file));\n    try {\n      const response = await fetch(\"http://localhost:5001/merge-pdf\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(text || \"Merge failed\");\n      }\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"merged.pdf\";\n      a.click();\n      URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error(\"‚ùå Merge Error:\", err);\n      setError(\"Merging failed. Please check the files or try again.\");\n    } finally {\n      setMerging(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"merge-pdf-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCCE Merge PDF Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      multiple: true,\n      onChange: e => setFiles(Array.from(e.target.files))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMerge,\n      disabled: merging || files.length < 2,\n      children: merging ? \"üîÑ Merging...\" : \"üîó Merge PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(MergePdf, \"f8dAk1Q13a5SaQlJxqbzDAIZ43w=\");\n_c = MergePdf;\nexport default MergePdf;\nvar _c;\n$RefreshReg$(_c, \"MergePdf\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MergePdf","_s","files","setFiles","merging","setMerging","error","setError","handleMerge","length","alert","formData","FormData","forEach","file","append","response","fetch","method","body","ok","text","Error","blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","multiple","onChange","e","Array","from","target","onClick","disabled","style","color","_c","$RefreshReg$"],"sources":["D:/Service Company/safeeditpdf/src/components/MergePdf.jsx"],"sourcesContent":["// src/components/MergePdf.jsx\r\nimport React, { useState } from \"react\";\r\n\r\nfunction MergePdf() {\r\n  const [files, setFiles] = useState([]);\r\n  const [merging, setMerging] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleMerge = async () => {\r\n    if (files.length < 2) {\r\n      alert(\"Please select at least 2 PDF files.\");\r\n      return;\r\n    }\r\n\r\n    setMerging(true);\r\n    setError(null);\r\n\r\n    const formData = new FormData();\r\n    files.forEach((file) => formData.append(\"pdf_files\", file));\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5001/merge-pdf\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const text = await response.text();\r\n        throw new Error(text || \"Merge failed\");\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = \"merged.pdf\";\r\n      a.click();\r\n      URL.revokeObjectURL(url);\r\n    } catch (err) {\r\n      console.error(\"‚ùå Merge Error:\", err);\r\n      setError(\"Merging failed. Please check the files or try again.\");\r\n    } finally {\r\n      setMerging(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"merge-pdf-container\">\r\n      <h2>üìé Merge PDF Files</h2>\r\n\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/pdf\"\r\n        multiple\r\n        onChange={(e) => setFiles(Array.from(e.target.files))}\r\n      />\r\n\r\n      <button onClick={handleMerge} disabled={merging || files.length < 2}>\r\n        {merging ? \"üîÑ Merging...\" : \"üîó Merge PDFs\"}\r\n      </button>\r\n\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MergePdf;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}